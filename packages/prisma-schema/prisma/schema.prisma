// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  Promoter   Promoter? @relation(fields: [promoterId], references: [id])
  promoterId Int?
  Venue      Venue?    @relation(fields: [venueId], references: [id])
  venueId    Int?
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  email        String  @unique
  password     String?
  passwordSalt String?

  provider String

  staff Staff?

  auth_token AuthToken[]
}

model AuthToken {
  id            String   @id @default(uuid())
  access_token  String   @db.Text
  refresh_token String   @db.Text
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String
  created_at    DateTime @default(now())
}

model Venue {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  events Event[]
}

model Promoter {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  events Event[]
}

model Artist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String

  concerts ConcertsOnArtists[]
}

model EmailAuthRequest {
  id              String    @id @default(uuid())
  email           String
  authcode        String
  authenticated   Boolean   @default(false)
  createdAt       DateTime  @default(now())
  authenticatedAt DateTime?
}

// admin
model Staff {
  id           String   @id @default(uuid())
  created_at   DateTime @default(now())
  isAuthorized Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
}

model ConcertCategory {
  id        String    @id @default(uuid())
  title     String
  concerts  Concert[]
  createdAt DateTime  @default(now())
}

model ConcertsOnArtists {
  concert   Concert  @relation(fields: [concertId], references: [id])
  concertId String
  artist    Artist   @relation(fields: [artistId], references: [id])
  artistId  String
  createdAt DateTime @default(now())

  @@id([concertId, artistId])
}

model Concert {
  id                String              @id @default(uuid())
  artists           ConcertsOnArtists[]
  title             String
  location          String?
  date              DateTime?
  html              String?             @db.Text
  concertCategoryId String              @default(uuid())
  concertCategory   ConcertCategory     @relation(fields: [concertCategoryId], references: [id])
  posters           ConcertPoster[]
  tickets           ConcertTicket[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?

  @@index([concertCategoryId])
}

model ConcertPoster {
  id        String   @id @default(uuid())
  concertId String
  concert   Concert  @relation(fields: [concertId], references: [id])
  imageURL  String
  createdAt DateTime @default(now())

  @@index([concertId])
}

model ConcertTicket {
  id           String               @id @default(uuid())
  concertId    String
  concert      Concert              @relation(fields: [concertId], references: [id])
  openDate     DateTime
  seller       String
  sellingURL   String
  createdAt    DateTime             @default(now())
  ticketPrices ConcertTicketPrice[]

  @@index([concertId])
}

model ConcertTicketPrice {
  id              String        @id @default(uuid())
  concertTicketId String
  concertTicket   ConcertTicket @relation(fields: [concertTicketId], references: [id])
  title           String
  price           Float
  priceCurrency   String
  createdAt       DateTime      @default(now())

  @@index([concertTicketId])
}

model Career {
  id        String    @id @default(uuid())
  company   String
  startDate DateTime
  endDate   DateTime?
}
